var searchIndex = {};
searchIndex['containerof'] = {"items":[[0,"","containerof","Intrusive structure support in Rust.",null,null],[3,"IntrusiveAlias","","Alias that has the same representation as an intrusive type. The\nidea is to be able to use this alias for intrusive facility\nimplementations, by defining the \"true\" implementation of the\nfacility to use the single (but type-unsafe) IntrusiveAlias type,\nwhile allowing type-safe wrapper implementations to delegate their\nbehavior to the implementation function.",null,null],[3,"OwnBox","","",null,null],[3,"BorrowBox","","",null,null],[3,"BorrowBoxMut","","",null,null],[8,"IntrusiveBase","","",null,null],[16,"Container","containerof::IntrusiveBase","Type of containing structure.",null,null],[16,"Field","","Type of intrusive field within containing structure.",null,null],[10,"offset","containerof","Returns offset of intrusive field within containing structure.",0,{"inputs":[{"name":"intrusivebase"}],"output":{"name":"usize"}}],[10,"new","","Ownership-moving translation from generic intrusive pointer\nalias to type-safe intrusive pointer.",0,{"inputs":[{"name":"intrusivebase"},{"name":"intrusivealias"}],"output":{"name":"self"}}],[10,"as_alias","","Allow using type-safe intrusive pointer as generic intrusive pointer.",0,{"inputs":[{"name":"intrusivebase"}],"output":{"name":"intrusivealias"}}],[8,"Intrusive","","Trait defining routines for translation between containing\nstructure and intrusive field. The only implementors of this type\nshould be the pointer-types defined by the `containerof_intrusive`\nmacro.",null,null],[10,"from_alias","","Ownership-moving translation from generic intrusive pointer\nalias to type-safe intrusive pointer.",1,{"inputs":[{"name":"intrusive"},{"name":"intrusivealias"}],"output":{"name":"self"}}],[10,"into_alias","","Ownership-moving translation from type-safe intrusive pointer\nto generic intrusive pointer.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"intrusivealias"}}],[10,"as_alias_mut","","Allow using type-safe intrusive pointer as mutable generic\nintrusive pointer.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"intrusivealias"}}],[10,"of_alias","","Allow using generic intrusive pointer as type-safe intrusive\npointer.",1,{"inputs":[{"name":"intrusive"},{"name":"intrusivealias"}],"output":{"name":"self"}}],[10,"of_alias_mut","","Allow using generic intrusive pointer as mutable type-safe\nintrusive pointer.",1,{"inputs":[{"name":"intrusive"},{"name":"intrusivealias"}],"output":{"name":"self"}}],[10,"from_container","","Represent ownership of a container as ownership of an Intrusive\npointer type. (Inverse of `into_container`.)",1,{"inputs":[{"name":"intrusive"},{"name":"ownbox"}],"output":{"name":"self"}}],[10,"into_container","","Represent ownership of an Intrusive pointer type as ownership of\nits container. (Inverse of `from_container`.)",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"ownbox"}}],[10,"of_container","","",1,{"inputs":[{"name":"intrusive"},{"name":"container"}],"output":{"name":"borrowbox"}}],[10,"of_container_mut","","",1,{"inputs":[{"name":"intrusive"},{"name":"container"}],"output":{"name":"borrowboxmut"}}],[10,"as_container","","Grant referential access to the container of this intrusive\npointer type.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"container"}}],[10,"as_container_mut","","Grant mutable referential access to the container of this\nintrusive pointer type.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"container"}}],[10,"from_field","","Assuming the \"field\" is a field in the container object, take\nownership of the field as an intrusive pointer, allowing\neventual translation back to the container. (Inverse of\n`into_field`.)",1,{"inputs":[{"name":"intrusive"},{"name":"ownbox"}],"output":{"name":"self"}}],[10,"into_field","","Represent ownership of the container object as ownership of\nthe intrusive field in the object. (Inverse of `from_field`.)",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"ownbox"}}],[10,"of_field","","",1,{"inputs":[{"name":"intrusive"},{"name":"field"}],"output":{"name":"borrowbox"}}],[10,"of_field_mut","","",1,{"inputs":[{"name":"intrusive"},{"name":"field"}],"output":{"name":"borrowboxmut"}}],[10,"as_field","","Grant referential access to the intrusive field represented by\nthis intrusive pointer.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"field"}}],[10,"as_field_mut","","Grant mutable referential access to the intrusive field represented by\nthis intrusive pointer.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"field"}}],[11,"fmt","","",2,{"inputs":[{"name":"intrusivealias"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"intrusivealias"}],"output":{"name":"intrusivealias"}}],[11,"eq","","",2,{"inputs":[{"name":"intrusivealias"},{"name":"intrusivealias"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"intrusivealias"},{"name":"intrusivealias"}],"output":{"name":"bool"}}],[11,"new","","",2,{"inputs":[{"name":"intrusivealias"},{"name":"usize"}],"output":{"name":"intrusivealias"}}],[11,"new_of","","",2,{"inputs":[{"name":"intrusivealias"},{"name":"t"}],"output":{"name":"intrusivealias"}}],[11,"get_address","","",2,{"inputs":[{"name":"intrusivealias"}],"output":{"name":"usize"}}],[11,"get_address","","",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"usize"}}],[11,"from_alias","","",3,{"inputs":[{"name":"ownbox"},{"name":"intrusivealias"}],"output":{"name":"ownbox"}}],[11,"from_ref","","",3,{"inputs":[{"name":"ownbox"},{"name":"t"}],"output":{"name":"ownbox"}}],[11,"into_alias","","",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"intrusivealias"}}],[11,"as_alias","","",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"intrusivealias"}}],[11,"from_box","","",3,{"inputs":[{"name":"ownbox"},{"name":"box"}],"output":{"name":"ownbox"}}],[11,"into_box","","",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"box"}}],[6,"Target","","",null,null],[11,"deref","","",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"t"}}],[11,"drop","","",3,{"inputs":[{"name":"ownbox"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"borrowbox"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"borrowbox"},{"name":"t"}],"output":{"name":"borrowbox"}}],[11,"new_from","","",4,{"inputs":[{"name":"borrowbox"},{"name":"intrusivealias"},{"name":"u"}],"output":{"name":"borrowbox"}}],[6,"Target","","",null,null],[11,"deref","","",4,{"inputs":[{"name":"borrowbox"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"borrowboxmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[{"name":"borrowboxmut"},{"name":"t"}],"output":{"name":"borrowboxmut"}}],[11,"new_from","","",5,{"inputs":[{"name":"borrowboxmut"},{"name":"intrusivealias"},{"name":"u"}],"output":{"name":"borrowboxmut"}}],[6,"Target","","",null,null],[11,"deref","","",5,{"inputs":[{"name":"borrowboxmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",5,{"inputs":[{"name":"borrowboxmut"}],"output":{"name":"t"}}],[14,"containerof_field_offset!","","Implement C-like `offsetof` macro in Rust. Will become obsolete\nwhen-and-if offsetof() is implemented in the core language.",null,null],[14,"containerof_intrusive!","","Define a type representing the translation between an intrusive\nfield and its containing structure.",null,null]],"paths":[[8,"IntrusiveBase"],[8,"Intrusive"],[3,"IntrusiveAlias"],[3,"OwnBox"],[3,"BorrowBox"],[3,"BorrowBoxMut"]]};
initSearch(searchIndex);
